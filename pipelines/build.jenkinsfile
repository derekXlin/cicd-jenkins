pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
    }
    
    parameters {
        string(name: 'git_repo', defaultValue: 'https://bitbucket.org/mulesoftapacservice/demo-employee-api.git', description: 'Where the source code is checked out from?')
        string(name: 'git_branch', defaultValue: 'develop', description: 'target branch')
        string(name: 'git_maven_repo', defaultValue: 'https://bitbucket.org/derekxlin/cicd-maven.git', description: 'Where the maven setting xml is checked out from?')
        string(name: 'git_credential_id', defaultValue: 'bitbucket-credentials', description: 'credentials to check out source code from GIT scm')
        string(name: 'nexus_release_repository_id', defaultValue: 'local-docker-nexus', description: 'Release Repository ID where we will upload the snapshot artifact')
        string(name: 'nexus_release_repository_url', defaultValue: 'http://172.17.0.1:18081/nexus/content/repositories/releases/', description: 'Release Repository URL where we will upload the snapshot artifact')
        string(name: 'nexus_snapshot_repository_id', defaultValue: 'local-docker-nexus-snapshots', description: 'Snapshot Repository ID where we will upload the snapshot artifact')
        string(name: 'nexus_snapshot_repository_url', defaultValue: 'http://172.17.0.1:18081/nexus/content/repositories/snapshots/', description: 'Snapshot Repository URL where we will upload the snapshot artifact')

    }


    //environment {
        //Jenkins credential id to authenticate to GIT Lab
        // GIT_CREDENTIAL_ID = "bitbucket-credentials"
        // Jenkins credential id to authenticate to Nexus OSS
        // NEXUS_CREDENTIAL_ID = "nexus-credentials"
        // Repository where we will upload the snapshot artifact
        // NEXUS_RELEASE_REPOSITORY_ID = "local-docker-nexus"
        // Repository where we will upload the snapshot artifact
        // NEXUS_RELEASE_REPOSITORY_URL = "http://172.17.0.1:18081/nexus/content/repositories/releases/"
        // Repository where we will upload the snapshot artifact
        // NEXUS_SNAPSHOT_REPOSITORY_ID = "local-docker-nexus-snapshots"
        // Repository where we will upload the snapshot artifact
        // NEXUS_SNAPSHOT_REPOSITORY_URL = "http://172.17.0.1:18081/nexus/content/repositories/snapshots/"

    //}


    stages {
        stage('Pre-Build')
        {
            steps {
                sh 'mkdir -p mavenSettings'
                dir("mavenSettings")
                {
                    // Get some code from a GitHub repository
                    git (
                        url: "${params.git_maven_repo}",
                        credentialsId: "${params.git_credential_id}",
                        branch: "master"
                    )
                
                }
            }
        }
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git (
                    url: "${params.git_repo}",
                    credentialsId: "${params.git_credential_id}",
                    branch: "${params.git_branch}"
                
                )

                // Run Maven on a Unix agent.
                sh "mvn clean package -Dmule.env=local -s mavenSettings/settings.xml"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    //junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                }
            }
        }

        stage("publish to nexus") {
            steps {
                script {
                    echo "start deployment to repository"
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    //mule runtime version
                    muleRuntimeVersion = pom.properties.'mule.version' ?: pom.properties.'app.runtime'
                    echo "muleRuntimeVersion=${muleRuntimeVersion}"
                    //mule packaging type
                    mulePackageType = (muleRuntimeVersion.startsWith("3.*.*")) ? "zip": "jar"
                    echo "mulePackageType=${mulePackageType}"
                    target_repo_id = (pom.version.endsWith("SNAPSHOT"))? "${params.nexus_snapshot_repository_id}":"${params.nexus_release_repository_id}"
                    target_repo_url = (pom.version.endsWith("SNAPSHOT"))? "${params.nexus_snapshot_repository_url}" : "${params.nexus_release_repository_url}"
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${mulePackageType}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version: ${pom.version} repo: ${target_repo_id}  repo url: ${target_repo_url} ";

                        sh "mvn deploy:deploy-file -DgroupId=${pom.groupId} -DartifactId=${pom.artifactId} -Dversion=${pom.version} -Dpackaging=${mulePackageType} -Dfile=${artifactPath} -DrepositoryId=${target_repo_id} -Durl=${target_repo_url} -DgeneratePom=false -Dmaven.install.skip=true -s mavenSettings/settings.xml"

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
}

